<?php
namespace Http;

/**
* Curl
* 支持自定义CookieJar
* 支持HttpHeader
* 支持Get / Post 数据
*/
class Curl
{
    protected $ch;  // 存放Curl句柄
    protected $host = '';
    protected $scheme = 'http';
    protected $path = '';      // /...
    protected $query = '';     // ?...
    protected $fragment = '';  // #...
    protected $isHttps = false;
    protected $isPost = false;
    protected $urlNow = '';    // scheme host path
    protected $queryUrl = '';    // scheme host path defaultUrl
    protected $httpsUrlQuery = '';
    protected $data = [];
    protected $dataStr = '';

    protected $cookie = '';
    protected $isSetCookie = false;
    protected $header = [
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Encoding: ",
            "Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Cache-Control: no-cache",
            "Connection: keep-alive",
            "Pragma: no-cache",
            "Upgrade-Insecure-Requests: 1",
            "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36",
        ];
    protected $options_default = [
                    CURLOPT_RETURNTRANSFER => true,  // 返回而不是输出
                    CURLOPT_HEADER => false          // 返回body内容中不包含header
                ];  // Curl设置选项
    protected $options = [];  // Curl设置选项


    function __construct($url='',$options=[])
    {
        if ( !empty($url) ) {
            $this->url($url);
        }
    }

    public function cookieStr($cookie='')
    {
        # 每次携带cookie
        if ( $cookie ) {
            $this->cookie = $cookie;
            $this->setOption( CURLOPT_COOKIE, CURLOPT_COOKIE);
            return $this;
        }
    }

    public function cookie($cookie='',$isUpdate=false)
    {
        $this->isUpdate = $isUpdate;
        if ( $cookie ) {
            $this->cookie = $cookie;
            # 转为写入文件
            // $this->setOption( CURLOPT_COOKIE, CURLOPT_COOKIE);
        }
        return $this;
    }

    public function cookieJar()
    {

        $cookir_jar = $this->getCookieFile();
        $this->setOption( CURLOPT_COOKIEFILE, $cookir_jar);
        $this->setOption( CURLOPT_COOKIEJAR, $cookir_jar);
    }

    /**
     * 获取cookiejar
     * @return [type] [description]
     */
    protected function getCookieFile()
    {
        defined('DATA_PATH') or define('DATA_PATH','./');
        $cookie_dir = DATA_PATH . 'cookie/' . $this->host;
        if ( !file_exists($cookie_dir) ) {
            mkdir($cookie_dir,0777,true);
        }
        $cookie_file = $cookie_dir . '/cookie.dat';
        if ( $this->isUpdate === true ) {
            unlink($cookie_file);
        }
        if ( !file_exists($cookie_file) ) {
            $fp = fopen($cookie_file,'w');
            fclose($fp);
            chmod($cookie_file,0777);
            $this->importCookie($cookie_file);
        }
        return $cookie_file;
    }

    /**
     * 自动导入CookieStr 只首次创建文件时导入
     * @param  string $cookie_file [description]
     * @return [type]              [description]
     */
    protected function importCookie($cookie_file='')
    {
        $s = <<<EOF
# Netscape HTTP Cookie File
# http://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.


EOF;
        $s .= $this->getCookieTxt();
        file_put_contents($cookie_file,$s);
    }

    public function url($url='')
    {
        $this->url  = $url;
        $this->parseUrl();
    }

    public function https($op=true)
    {
        if ( $op == false ) {
            $this->isHttps = false;
        }
        return $this;
    }


    /**
     * 解析Url
     * @param  boolean $isHttps [description]
     * @return [type]           [description]
     */
    public function parseUrl()
    {
        $info = parse_url($this->url);
        // scheme host path query fragment
        foreach ($info as $key => $val) {
            if ( !empty($val) ) {
                if ( in_array($key,['scheme','host']) ) {
                    $val = strtolower($val);
                }
                $this->$key = $val;
            }
        }
        if ( $this->scheme == 'https' ) {
            $this->https(true);
            $this->httpsUrlQuery = $tmp['query'];
            # 指定https的query
        }
        // 分解url 指定url的各个子部分
    }

    /**
     * 组装Url
     * @return queryUrl 查询链接
     */
    public function buildUrl()
    {
        # 设置 scheme host path query fragment
        $query = $this->query;
        if ( !empty($this->httpsUrlQuery) ) {
            $query = $this->httpsUrlQuery;
            $this->httpsUrlQuery = '';
        }
        $this->urlNow = $this->scheme . '://' . $this->host . $this->path;
        if ( $query ) {
            $this->queryUrl = $this->urlNow . '?' . $query;
        } else {
            $this->queryUrl = $this->urlNow;
        }
        $this->setOption( CURLOPT_URL , $this->queryUrl );
    }

    /**
     * 添加数据 设置CURL_OPT
     * @return [type] [description]
     */
    public function build()
    {
        # 设置url
        $this->buildUrl();

        # 设置数据
        $this->buildData();

        # 设置cookie
        $this->cookieJar();

        # 设置Header
        $this->buildHeader();

        # 设置buildOpt
        $this->buildOpt();

    }

    /**
     * 设置Curl选项
     * @return [type] [description]
     */
    public function buildOpt()
    {
        $opts = $this->options + $this->options_default;
        $this->opts = $opts;
    }

    public function buildHeader()
    {
        array_unshift($this->header,'Host: '.$this->host);
        $this->setOption(CURLOPT_HTTPHEADER,$this->header);
    }

    /**
     * 设置数据
     * @return [type] [description]
     */
    public function buildData()
    {
        # Https 设置Https 并设置数据
        if ( $this->isPost ) {
            $this->setOption(CURLOPT_POST,true);
            # 指定:Content-type: application/x-www-form-urlencoded
            $this->setOption(CURLOPT_POSTFIELDS,$this->data);
            # 指定 Post的数据
        } else {
            # http 设置数据
            if ( !$this->data ) {
                return;
            }
            $data = http_build_query($this->data);
            if ( preg_match('/\?/',$this->queryUrl) >= 1 ) {

                if ( substr($this->queryUrl,-1) == '?' ) {
                    $this->queryUrl .= $data;
                } else {
                    $this->queryUrl .= '&' . $data;
                }
            } else {
                $this->queryUrl .= '?' . $data;
            }
        }
        // 设定queryUrl应该在此之后
        $this->setOption( CURLOPT_URL, $this->queryUrl);
    }


    protected function setOption($name='',$value='')
    {
        $this->options[$name] = $value;
    }

    public function data($data=[])
    {
        if ( !empty($data) ) {
            $this->data = $data;
        }
    }

    public function get($data=[])
    {
        if ( is_array($data) ) {
            $this->data($data);
        }
        return $this->run('get');
    }

    public function post($data=[])
    {
        if ( is_array($data) ) {
            $this->data($data);
        }
        return $this->run('post');
    }

    public function run($method='get')
    {

        switch ($method) {
            case 'get':
                break;
            case 'post':
                $this->isPost = true;
                break;
            default:
                # code...
                break;
        }
        $this->build();

        return $this->exec();
    }

    protected function exec()
    {
        $ch = curl_init();
        curl_setopt_array($ch,$this->opts);
        //var_dump($this->opts);
        $data = curl_exec($ch);
        $info = curl_getinfo($ch);
        $error = curl_error($ch);
        curl_close($ch);
        return $data;
    }

    public function parseCookie($cookieStr='')
    {
        $res = [];
        $arr = explode(';',$cookieStr);
        foreach ($arr as $key => $val) {
            list($k,$v) = explode('=',$val);
            $res[trim($k)] = trim($v);
        }
        return $res;
    }

    public function getCookieTxt($cookieStr='')
    {
        if ( empty($cookieStr) ) {
            $cookieStr = $this->cookie;
        }
        $res = $this->parseCookie($cookieStr);
        $str = '';
        foreach ($res as $key => $val) {
            // w.llqhz.cn   FALSE   /   FALSE   0   name4   avsfvgfaaaaaa
            $str.= $this->host;
            $str.= "\tFALSE\t/\tFALSE\t0\t";
            $str.= $key ."\t". $val;
            $str.= "\n";
        }
        return $str;
    }
}






